package com.hpmt.cool100.dbhelp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHILD_PARAMS.
*/
public class childParamsDao extends AbstractDao<childParams, Long> {

    public static final String TABLENAME = "CHILD_PARAMS";

    /**
     * Properties of entity childParams.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DefaultParam = new Property(1, String.class, "defaultParam", false, "DEFAULT_PARAM");
        public final static Property RageParam = new Property(2, String.class, "rageParam", false, "RAGE_PARAM");
        public final static Property RageExplainParam = new Property(3, String.class, "rageExplainParam", false, "RAGE_EXPLAIN_PARAM");
        public final static Property UnitParam = new Property(4, String.class, "unitParam", false, "UNIT_PARAM");
        public final static Property ExplainParam = new Property(5, String.class, "explainParam", false, "EXPLAIN_PARAM");
        public final static Property ArgsParam = new Property(6, String.class, "argsParam", false, "ARGS_PARAM");
        public final static Property ParamID = new Property(7, String.class, "paramID", false, "PARAM_ID");
    };


    public childParamsDao(DaoConfig config) {
        super(config);
    }
    
    public childParamsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHILD_PARAMS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DEFAULT_PARAM' TEXT," + // 1: defaultParam
                "'RAGE_PARAM' TEXT," + // 2: rageParam
                "'RAGE_EXPLAIN_PARAM' TEXT," + // 3: rageExplainParam
                "'UNIT_PARAM' TEXT," + // 4: unitParam
                "'EXPLAIN_PARAM' TEXT," + // 5: explainParam
                "'ARGS_PARAM' TEXT," + // 6: argsParam
                "'PARAM_ID' TEXT);"); // 7: paramID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHILD_PARAMS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, childParams entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String defaultParam = entity.getDefaultParam();
        if (defaultParam != null) {
            stmt.bindString(2, defaultParam);
        }
 
        String rageParam = entity.getRageParam();
        if (rageParam != null) {
            stmt.bindString(3, rageParam);
        }
 
        String rageExplainParam = entity.getRageExplainParam();
        if (rageExplainParam != null) {
            stmt.bindString(4, rageExplainParam);
        }
 
        String unitParam = entity.getUnitParam();
        if (unitParam != null) {
            stmt.bindString(5, unitParam);
        }
 
        String explainParam = entity.getExplainParam();
        if (explainParam != null) {
            stmt.bindString(6, explainParam);
        }
 
        String argsParam = entity.getArgsParam();
        if (argsParam != null) {
            stmt.bindString(7, argsParam);
        }
 
        String paramID = entity.getParamID();
        if (paramID != null) {
            stmt.bindString(8, paramID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public childParams readEntity(Cursor cursor, int offset) {
        childParams entity = new childParams( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // defaultParam
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rageParam
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rageExplainParam
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unitParam
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // explainParam
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // argsParam
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // paramID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, childParams entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDefaultParam(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRageParam(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRageExplainParam(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitParam(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExplainParam(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setArgsParam(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParamID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(childParams entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(childParams entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
